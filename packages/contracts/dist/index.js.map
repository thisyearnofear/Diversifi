{"version":3,"sources":["../src/index.ts","../src/celo.ts"],"sourcesContent":["export * from './celo';\n","import { ethers } from 'ethers';\n\n// Celo stablecoin addresses\nconst BROKER_ADDRESS = '0x777a8255ca72412f0d706dc03c9d1987306b4cad';\n\n// ABIs\nconst ABIS = {\n  ERC20_BALANCE: ['function balanceOf(address) view returns (uint256)'],\n  ERC20_ALLOWANCE: [\n    'function allowance(address owner, address spender) view returns (uint256)',\n  ],\n  ERC20_APPROVE: [\n    'function approve(address spender, uint256 amount) returns (bool)',\n  ],\n  BROKER_PROVIDERS: [\n    'function getExchangeProviders() view returns (address[])',\n  ],\n  EXCHANGE: [\n    'function getExchanges() view returns ((bytes32 exchangeId, address[] assets)[])',\n  ],\n  BROKER_RATE: [\n    'function getAmountOut(address exchangeProvider, bytes32 exchangeId, address assetIn, address assetOut, uint256 amountIn) view returns (uint256)',\n  ],\n  BROKER_SWAP: [\n    'function swapIn(address exchangeProvider, bytes32 exchangeId, address assetIn, address assetOut, uint256 amountIn, uint256 minAmountOut) returns (uint256)',\n  ],\n};\n\n// Celo stablecoin addresses\nconst STABLECOIN_ADDRESSES = {\n  cUSD: '0x765DE816845861e75A25fCA122bb6898B8B1282a',\n  cEUR: '0xD8763CBa276a3738E6DE85b4b3bF5FDed6D6cA73',\n  cREAL: '0xe8537a3d056DA446677B9E9d6c5dB704EaAb4787',\n} as const;\n\nexport type CeloStablecoin = keyof typeof STABLECOIN_ADDRESSES;\n\n/**\n * Get balance of a specific Celo stablecoin for an address\n */\nexport async function getStablecoinBalance(\n  address: string,\n  token: CeloStablecoin,\n) {\n  try {\n    // Create a read-only provider for Celo mainnet\n    const provider = new ethers.JsonRpcProvider(\n      'https://forno.celo.org',\n    );\n\n    // Create contract instance\n    const tokenContract = new ethers.Contract(\n      STABLECOIN_ADDRESSES[token],\n      ABIS.ERC20_BALANCE,\n      provider,\n    );\n\n    // Get balance\n    const balance = await tokenContract.balanceOf(address);\n\n    // Return as string\n    return balance.toString();\n  } catch (error) {\n    console.error(`Error getting ${token} balance:`, error);\n    return '0';\n  }\n}\n\n/**\n * Get all Celo stablecoin balances for an address\n */\nexport async function getAllStablecoinBalances(address: string) {\n  try {\n    // For Edge runtime compatibility, we'll use mock data initially\n    // In a production environment, you would implement proper fetching\n    return {\n      cUSD: '1000000000000000000', // 1 cUSD\n      cEUR: '2000000000000000000', // 2 cEUR\n      cREAL: '3000000000000000000', // 3 cREAL\n    };\n\n    // The code below would be used in a non-Edge environment:\n    /*\n    const provider = new ethers.JsonRpcProvider(\"https://forno.celo.org\");\n\n    const balances = await Promise.all(\n      Object.entries(STABLECOIN_ADDRESSES).map(async ([token, tokenAddress]) => {\n        try {\n          const tokenContract = new ethers.Contract(\n            tokenAddress,\n            ABIS.ERC20_BALANCE,\n            provider\n          );\n\n          const balance = await tokenContract.balanceOf(address);\n          return { token, balance: balance.toString() };\n        } catch (error) {\n          console.error(`Error getting ${token} balance:`, error);\n          return { token, balance: \"0\" };\n        }\n      })\n    );\n\n    return Object.fromEntries(\n      balances.map(({ token, balance }) => [token, balance])\n    );\n    */\n  } catch (error) {\n    console.error('Error getting all stablecoin balances:', error);\n    return {\n      cUSD: '0',\n      cEUR: '0',\n      cREAL: '0',\n    };\n  }\n}\n\n/**\n * Get exchange rates for Celo stablecoins\n */\nexport async function getStablecoinRates() {\n  try {\n    // For Edge runtime compatibility, we'll use mock data initially\n    return {\n      cUSD: '1.0',\n      cEUR: '1.1',\n      cREAL: '0.2',\n    };\n\n    // The code below would be used in a non-Edge environment:\n    /*\n    const provider = new ethers.JsonRpcProvider(\"https://forno.celo.org\");\n\n    // Create contract instances\n    const brokerContract = new ethers.Contract(\n      BROKER_ADDRESS,\n      ABIS.BROKER_PROVIDERS,\n      provider\n    );\n\n    // Get exchange providers\n    const exchangeProviders = await brokerContract.getExchangeProviders();\n\n    // Find the exchange for cUSD/cEUR and cUSD/cREAL\n    const rates = {\n      cUSD: \"1.0\", // cUSD is always 1:1 with USD\n      cEUR: \"1.1\", // Default fallback\n      cREAL: \"0.2\"  // Default fallback\n    };\n\n    // Implementation would continue here...\n\n    return rates;\n    */\n  } catch (error) {\n    console.error('Error getting stablecoin rates:', error);\n    return {\n      cUSD: '1.0',\n      cEUR: '1.1',\n      cREAL: '0.2',\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAAuB;AAMvB,IAAM,OAAO;AAAA,EACX,eAAe,CAAC,oDAAoD;AAAA,EACpE,iBAAiB;AAAA,IACf;AAAA,EACF;AAAA,EACA,eAAe;AAAA,IACb;AAAA,EACF;AAAA,EACA,kBAAkB;AAAA,IAChB;AAAA,EACF;AAAA,EACA,UAAU;AAAA,IACR;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX;AAAA,EACF;AACF;AAGA,IAAM,uBAAuB;AAAA,EAC3B,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AACT;AAOA,eAAsB,qBACpB,SACA,OACA;AACA,MAAI;AAEF,UAAM,WAAW,IAAI,qBAAO;AAAA,MAC1B;AAAA,IACF;AAGA,UAAM,gBAAgB,IAAI,qBAAO;AAAA,MAC/B,qBAAqB,KAAK;AAAA,MAC1B,KAAK;AAAA,MACL;AAAA,IACF;AAGA,UAAM,UAAU,MAAM,cAAc,UAAU,OAAO;AAGrD,WAAO,QAAQ,SAAS;AAAA,EAC1B,SAAS,OAAO;AACd,YAAQ,MAAM,iBAAiB,KAAK,aAAa,KAAK;AACtD,WAAO;AAAA,EACT;AACF;AAKA,eAAsB,yBAAyB,SAAiB;AAC9D,MAAI;AAGF,WAAO;AAAA,MACL,MAAM;AAAA;AAAA,MACN,MAAM;AAAA;AAAA,MACN,OAAO;AAAA;AAAA,IACT;AAAA,EA4BF,SAAS,OAAO;AACd,YAAQ,MAAM,0CAA0C,KAAK;AAC7D,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,IACT;AAAA,EACF;AACF;AAKA,eAAsB,qBAAqB;AACzC,MAAI;AAEF,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,IACT;AAAA,EA2BF,SAAS,OAAO;AACd,YAAQ,MAAM,mCAAmC,KAAK;AACtD,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,IACT;AAAA,EACF;AACF;","names":[]}